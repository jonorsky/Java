1- A Hello World Program

public class Main{
  public static void main(String[] args){
    System.out.println("Hello World!");
  }
}

2- Variables

public class Main{
  public static void main(String[] args){
    int x;
    short y;
    long ll;

    double z;
    float z1;

    char ch='A';
    boolean flag=true;

    byte bty=127;

    System.out.println(flag);
  }
}

3- String

public class Main{
  public static void main(String[] args){
    String str = "Hello ";
    String str1 = "World!";

    int x = 5;
    System.out.println(str + str1 + " "  + x);
  }
}

4- Loop

public class Main{
  public static void main(String[] args){

  // While Loop
  int i=0;
  while(i<5){
    System.out.println(i);
    i++;
  }

  // For Loop
  for(int j=0; j<5; j++){
    System.out.println(j);
  }

  // do while Loop
  int k=0;
  do{
    System.out.println(k);
    k++;
  }while(k<5);

  }
}

6-10 if,if else,else statement

public class Main{
  public static void main(String[] args){

  int x = 4;
  if(x==5)
    System.out.println("Hello World");
  else if(x==6)
    System.out.println("Damn");
  else
    System.out.println("Nah");

  }
}

11- Getting User Input
  * Import library 'import java.util.Scanner'
  * Add object 'Scanner input = new Scanner(System.in);'


import java.util.Scanner;

public class Main{
  public static void main(String[] args){
    Scanner input = new Scanner(System.in);
    String line = input.nextLine();
    char gender = input.next().charAt(0);
    int age = input.nextInt();
    long number = input.nextLong();
    double gpa = input.nextDouble();

    System.out.println(line);
    System.out.println(gender);
    System.out.println(age);
    System.out.println(number);
    System.out.println(gpa);
  }
}

13- Switch case

public class Main{
  public static void main(String[] args){
    String str = "start";

    switch(str){
      case "start":
        System.out.println("Starting..");
        break;
      case "stop":
        System.out.println("Stopping..");
        break;

      default:
        System.out.println("Cannot Recognize");
    }
  }
}

14- Arrays

public class Main{
  public static void main(String[] args){
    int pivot = 5;
    int[] arr = new int[pivot];
    for(int i=0; i<pivot; i++){
      arr[i]=i*2;
    }
    for(int i=0; i<pivot; i++){
      System.out.println(arr[i]);
    }
  }
}

15- Arrays of String

public class Main{
  public static void main(String[] args){
    String[] arr = {"Apple","Banana","Pear"};
    for(String temp:arr){
      System.out.println(temp);
    }
    for(int i=0; i<3; i++){
      System.out.println(arr[i]);
    }
  }
}

16- Multi-Dimensional Array

public class Main{
  public static void main(String[] args){
    int[][] grid = {
      {1,2,3},
      {4,5,6},
      {7,8,9}
    };

    for(int i=0; i<grid.length;i++){
      for(int j=0; j<grid[i].length; j++){
        System.out.print(grid[i][j]+ " ");
      }
      System.out.println();
    }
  }
}


17- Class and Objects

class Person{
  // Instance Variables (Data or States)
  String name;
  int age;

  void say(){
    System.out.println("Hello!");
  }
}

public class Main{
  public static void main(String[] args){
    Person p1 = new Person();
    p1.name = "Nico";
    p1.age = 18;
    p1.say();
    System.out.println(p1.name);

    Person p2 = new Person();
    p2.name = "Jem";
    p2.age = 19;
    p2.say();
    System.out.println(p2.name);
  }
}


18- Set and Getter

class Person{
  private int age;

  void setAge(int par){
    age = par;
  }

  int getAge(){
    return age;
  }
}

public class Main{
  public static void main(String[] args){
    Person p1 = new Person();
    p1.setAge(17);
    System.out.println(p1.getAge());
  }
}

22- Constructor

class Person{
  String name;
  int age;

  // Constructor without parameter
  Person(){
    name = ":Default:";
    age = 0;
  }

  // Constructor with parameter
  Person(String name, int age){
    this.name = name;
    this.age = age;
  }
}

public class Main{
  public static void main(String[] args){
    Person p1 = new Person();
    System.out.println(p1.name);
    System.out.println(p1.age);

    Person p2 = new Person("Nico",17);
    System.out.println(p2.name);
    System.out.println(p2.age);
  }
}


23- Static and Final

Static
class Student{
    static String school = "Ateneo"; // static
    String name;
    String course;

    // Constructor with Parameter
    public Student(String name,String course){
      this.name = name;
      this.course = course;
    }
}

// Advantage of static variable is it makes program more memory efficient
// Example:
// If theres 1000 student objects, it will inherit all instance variable from
// its superclass and each instance variable will accumulate 1 block of memory
//  ** Static Variable will only use one block of memory that all objects
//  ** will use. If the Static Variable changed, all objects containing that
//  ** that Static Variable will also change.


public class Main{
  public static void main(String[] args){

    // Can change static value of the blueprint class 'Student'
    // before creating of student objects
    // Student.school = "STI";

    Student s1 = new Student("Nico","BSIT");
    Student s2 = new Student("Jem","BSIT");

    System.out.println(s1.name);
    System.out.println(s1.course);
    System.out.println(s1.school + "\n");

    System.out.println(s2.name);
    System.out.println(s2.course);
    System.out.println(s2.school);
  }
}

Final
  Java Final Keyword
    > Stop Value change
    > Stop Method Overriding
    > Stop Inheritance

class Student{
    public static final String school = "Ateneo"; // static final
    String name;
    String course;

    // Constructor with Parameter
    public Student(String name,String course){
      this.name = name;
      this.course = course;
    }
}

// Advantage of static variable is it makes program more memory efficient
// Example:
// If theres 1000 student objects, it will inherit all instance variable from
// its superclass and each instance variable will accumulate 1 block of memory
//  ** Static Variable will only use one block of memory that all objects
//  ** will use. If the Static Variable changed, all objects containing that
//  ** that Static Variable will also change.

// Static Variable and its Final = Cannot be change
// 1 block memory accumulated and it canno be change.

public class Main{
  public static void main(String[] args){

    // Can change static value of the blueprint class 'Student'
    // before creating of student objects
    Student.school = "CAM HIGH";

    Student s1 = new Student("Nico","BSIT");
    Student s2 = new Student("Jem","BSIT");

    System.out.println(s1.name);
    System.out.println(s1.course);
    System.out.println(s1.school + "\n");

    System.out.println(s2.name);
    System.out.println(s2.course);
    System.out.println(s2.school);
  }
}

Final - Method

class Student{
    public static final String school = "Ateneo"; // static
    String name;
    String course;

    final void class_info(){ // Making void into final, cannot be override
      System.out.println(name);
      System.out.println(course);
      System.out.println(school);
    }
}

class Senior extends Student{
  void class_info(){
    System.out.println("Im Senior!");
  }

  // Error! You cannot override final method from superclass
}

public class Main{
  public static void main(String[] args){
    Student s1 = new Student();
    Senior  s2 = new Senior();
    s1.name = "Nico";
    s1.course = "BSIT";

    System.out.println(s1.name);
    System.out.println(s1.course);

    s2.class_info();

  }
}

Final-Class


final class Student { // Making class into final, it cant be extends
    public static final String school = "Ateneo"; // static
    String name;
    String course;

    void class_info(){
      System.out.println(name);
      System.out.println(course);
      System.out.println(school);
    }
}

class Senior extends Student{
  void class_info(){
    System.out.println("Im Senior!");
  }
}

public class Main{
  public static void main(String[] args){
    Student s1 = new Student();
    s1.name = "Nico";
    s1.course = "BSIT";

    System.out.println(s1.name);
    System.out.println(s1.course);
  }
}


25- To String

class Frog{

}

// Outputs detail of class
// Frog@4aa8f0b4
// Frog is classname + @ + address of the class but its hash unique identifer

public class Main{
  public static void main(String[] args){
      Frog frog1 = new Frog();
      System.out.println(frog1);
  }
}

StringBuilder = Efficient that concatinating Strings because when we concat
strings we're making another strings which inefficient.

class Frog{
  private String name;
  private int id;

  public Frog(int id,String name){
    this.id = id;
    this.name = name;
  }

  public String toString(){

    // Efficient 1:
    //return String.format("%4d: %s",id, name);

    // Efficient 2:
    StringBuilder sb = new StringBuilder();
    sb.append(id).append(": ").append(name);
    return sb.toString();
  }
}

// Helpful for Debugging objects by looking its content

public class Main{
  public static void main(String[] args){
      Frog frog1 = new Frog(7,"Nico ");
      Frog frog2 = new Frog(8,"Jem ");

      System.out.println(frog1);
      System.out.println(frog2);
  }
}

26- Inheritance

Override

class Machine{
  public void start(){
    System.out.println("Machine Started..");
  }
  public void stop(){
    System.out.println("Machine Stop..");
  }
}

class Car extends Machine{

  // Overriding the start() function from Superclass Machine
  @Override  // <-- Annotation for overwrite
  public void start(){
    System.out.println("Car Started.. = from subclass");
    //super.start();
  }

  // @Override Annotation is making sure that the function is existing in
  // Superclass, if the method didnt exist in the superclass then it will
  // complaint because it cant find the function that it will override.

  public void wipeWindShield(){
    System.out.println("Wiping windshield");
  }
}

public class Main{
  public static void main(String[] args){
      Machine mach1 = new Machine();
      Car mach2 = new Car();

      mach1.start();
      mach1.stop();

      mach2.start();
  }
}

27- Package

import p.Person;

public class Main{
  public static void main(String[] args){
    Person p1 = new Person();
    p1.name = "Nico";
    p1.age = 7;

    System.out.println(p1.name);
    System.out.println(p1.age);
  }
}

// Run:
// Make Folder and Copy Person.java and Main.java
// * cd to that folder and use this commands
//  > javac -d . Person.java
//  > javac Main.java
//  > java Main

// In the First statement, it creates package folder p with .class
// Second statement is to import the package + Class name
// Execute

================================================================================
Folder Content:
> mkdir 'test'
Fish.java
Main.java
Person.java
Info.java
================================================================================
/* File Name: Fish.java */
package ocean;

public class Fish{
  public String name;
  public int age;
  public String description;
}
================================================================================
/* File Name: Person.java */
// Java Package: javac -d . "file name"
// look for the "file name" it must have 'package com;'
// Run Package: java com.filename
package ocean;

public class Person{
  public String name;
  public int age;
}
================================================================================
/* File Name: Info.java */
package ocean.info;

public class Info{
  public static final String version = "1.5.0";
}

================================================================================
/* File Name: Main.java */

import ocean.Person;
import ocean.Fish;
import ocean.info.Info;

public class Main{
  public static void main(String[] args){
    Person p1 = new Person();
    p1.name = "Nico";
    p1.age = 7;

    System.out.println(p1.name);
    System.out.println(p1.age + "\n");

    Fish f1 = new Fish();
    f1.name = "Jem";
    f1.age = 17;
    f1.description = "Fish";

    System.out.println(f1.name);
    System.out.println(f1.age);
    System.out.println(f1.description);

    Info info1 = new Info();
    System.out.println("Version: " + info1.version);
  }
}
================================================================================
// Run:
// Make Folder and Copy Person.java and Main.java
// * cd to that folder and use this commands

javac -d . Person.java
javac -d . Fish.java
javac -d . Info.java
javac Main.java
java Main

// In ubuntu: ctrl + shift + v | to paste in CLI

// In the First statement, it creates package folder p with .class
// Second statement is to import the package + Class name
// Execute
================================================================================

28- interface
================================================================================
Interface is a blueprint of a class, to achieve abstraction. In short, it visualize
abstract methods and variables, it cannot have a method body.
Files:
  Info.java
  Machine.java
  Main.java
  Person.java

================================================================================
// Main.java
public class Main{
  public static void main(String[] args){
    Machine mach1 = new Machine();
    mach1.start();

    Person person1 = new Person("Nico");
    person1.greet();

    mach1.showinfo();
    person1.showinfo();
  }
}
================================================================================
// Info.java
public interface Info{
  public void showinfo();
}
================================================================================
// Machine.java
// implements does is it forces to override all headers and methods specify
// into the interface file 'Info.java'

public class Machine implements Info{
  private int id = 7;

  public void start(){
    System.out.println("Running..");
  }

  @Override
  public void showinfo(){
    System.out.println("Machine ID is: " + id);
  }
}
================================================================================
// Person.java
public class Person implements Info{
  private String name;

  public Person(String name){
    this.name = name;
  }

  public void greet(){
    System.out.println("Hello There!");
  }

  @Override
  public void showinfo(){
    System.out.println("Person Name is: " + name);
  }
}
================================================================================
Modified: Multiple Inheritance in java by interface
// File: Machine.java
// implements does is it forces to override all headers and methods specify
// into the interface file 'Info.java'

public class Machine implements Info,Version{
  private int id = 7;

  public void start(){
    System.out.println("Running..");
  }

  @Override
  public void showinfo(){
    System.out.println("Machine ID is: " + id);
  }

  @Override
  public void showversion(){
    System.out.println("Version is: 12345");
  }
}

// File: Version.java
public interface Version{
  public void showversion();
}
================================================================================
