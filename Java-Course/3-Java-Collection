53- ArrayList

import java.util.ArrayList;
import java.util.List;

public class Main{

  public static void print(ArrayList<Integer> arr){
    for(Integer value: arr){
      System.out.println(value);
    }
  }

  public static void main(String[] args){
    // template classes = ArrayList<>
    // we can put primitive type in ArrayList
    ArrayList<Integer> numbers = new ArrayList<Integer>();
    numbers.add(10);
    numbers.add(100);
    numbers.add(40);

    for(int i=0; i<numbers.size(); i++)
      System.out.println(numbers.get(i));

    System.out.println();

    // Delete last element - reasonably fast
    numbers.remove(numbers.size()-1);
    print(numbers);

    // Delete first element - very slow, even middle of the list
    numbers.remove(0);

    // Solution is LinkedList

    System.out.println();
    print(numbers);

    List<String> values = new ArrayList<String>();

    // LinkedList consumed more memory than arraylist: Pros and cons
  }
}


54- LinkedList

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;

public class Main{

  // If we want to add only and remove in the end of the list, then use arraylist
  // but if we want to add and remove anywhere in the list, then use LinkedList

  // Golden Rule: If you want to insert an element in the beginning of the List
  // then use LinkedList, else if you wan to insert into mid->end or end of the list
  // then use ArrayList
  public static void main(String[] args){

    // ArrayList manage arrays internaly
    // [0][1][2]....[n]
    ArrayList<Integer> arraylist = new ArrayList<Integer>();
    // When adding elements in front of list using ArrayList, it shifts
    // items to the right and it consumes a lot of time.
    //  > Faster in the end because it shifts only a few elements rather
    //    than the very first element
    LinkedList<Integer> linkedList = new LinkedList<Integer>();
    // LinkedList consist of elements where each element has a reference
    // to the previous and next element.
    // [0]->[1]->[2]->[3] .... ->[n]
    // slow because get element and get link to the next
    //  > fast in insert and delete anywhere because it gets the link and
    //    connects only to the next element rather than shifting.

    doTimings("ArrayList", arraylist);
    doTimings("LinkedList", linkedList);
  }

  private static void doTimings(String type, List<Integer> list){


    long start = System.currentTimeMillis();

    // Add items at end of list
    // for(int i=0; i<1E5; i++){
    //   list.add(i);
    // }

    // Add items at the beginning of list
    for(int i=0; i<1E5; i++){
      list.add(0,i);
    }

    long end = System.currentTimeMillis();

    System.out.println("Time Taken: " + (end-start) + " ms for " + type);
  }
}

56- Sorted Maps

import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.TreeMap;
import java.util.Map;

public class Main{
  // Major: linked, map, and sets
  public static void main(String[] args){
    // Not guaranteed order, but based on my observation. keys are sorted
    HashMap<Integer, String> hashMap = new HashMap<Integer, String>();
    // same order of data insertion
    LinkedHashMap<Integer, String> linkedhashMap = new LinkedHashMap<Integer, String>();
    // Tree map sorts the keys and natural order
    TreeMap<Integer, String> treeMap = new TreeMap<Integer, String>();

    testMap(treeMap);
  }

  public static void testMap(Map<Integer, String> map){
    map.put(9,"fox");
    map.put(4,"cat");
    map.put(8,"dog");
    map.put(1,"giraffe");
    map.put(0,"wan");
    map.put(15,"bear");
    map.put(6,"snake");

    for(Integer key: map.keySet()){
      System.out.println(key + ": " + map.get(key));
    }
  }
}

57- Sets

import java.util.Set;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.TreeSet;

public class Main{
  public static void main(String[] args){

    // HashSet does not retain order.
    // only stores unique element
    //Set<String> set1 = new HashSet<String>();

    // LinkedHashSet remembers the order we added items in
    // Set<String> set1 = new LinkedHashSet<String>();

    // TreeSet sorts in natural order/dictionary
    Set<String> set1 = new TreeSet<String>();


    set1.add("dog");
    set1.add("cat");
    set1.add("mouse");
    set1.add("snake");
    set1.add("bear");

    // Adding duplicate items does nothing.
    set1. add("mouse");

    System.out.println(set1);

    /////////// Iteration //////////
    for(String element: set1){
      System.out.println(element);
    }


    // Intersection
    Set<String> set2 = new TreeSet<String>();
    set2.add("dog");
    set2.add("cat");
    set2.add("giraffe");
    set2.add("monkey");
    set2.add("ant");

    Set<String> intersection = new HashSet<String>(set1);
    System.out.println(intersection);

    // Intersection between 2 sets
    intersection.retainAll(set2);
    System.out.println(intersection);

    Set<String> difference = new HashSet<String>(set1);
    difference .removeAll(set2);
    System.out.println(difference);
  }
}

55- HashMap: Retrieving Objects via a key

import java.util.HashMap;
import java.util.Map;

public class Main{
  // HashMap is Lookup Table
  // All Unique, it overrides other key values
  // HashMap doesnt make it in order, sometimes random
  public static void main(String[] args){
    HashMap<Integer,String> map = new HashMap<Integer,String>();
    map.put(5,"Five");
    map.put(8,"Eight");
    map.put(6,"Six");
    map.put(4,"Four");
    map.put(2,"Two");

    String text = map.get(4);
    System.out.println(text);

    for(Map.Entry<Integer,String> entry: map.entrySet()){
      int key = entry.getKey();
      String value = entry.getValue();

      System.out.println(key + ": " + value);
    }
  }
}

58- Using Custom Objects in Sets and as Keys in Maps


import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.Map;
import java.util.Set;

class Person{
  private int id;
  private String name;

  public Person(int id, String name){
    this.id = id;
    this.name = name;
  }

  @Override
  public String toString(){
    return "[ID is: " + id + ": " + name + "]";
  }

  // Generate hashCode() and equas()
  // Override hashcode produces an ID
  @Override
  public int hashCode(){
    final int prime = 31;
    int result = 1;
    result = prime * result + id;
    result = prime * result + ((name == null) ? 0 : name.hashCode());
    return result;
  }

  // Override equals is to compare if two objects are equal
  @Override
  public boolean equals(Object obj){
    if (this == obj)
      return true;
    if(obj == null)
      return false;
    if(getClass() != obj.getClass())
      return false;
    final Person other = (Person) obj;
    if(id!=other.id)
      return false;
    if(name == null){
      if(other.name != null)
        return false;
    }else if(!name.equals(other.name))
      return false;
    return true;
  }
}

public class Main{
  // Map is Unique
  public static void main(String[] args){
    Person p1 = new Person(0,"Nico");
    Person p2 = new Person(1,"Sue");
    Person p3 = new Person(2,"Mike");
    Person p4 = new Person(1,"Sue");

    Map<Person,Integer> map = new LinkedHashMap<Person, Integer>();
    map.put(p1,1);
    map.put(p2,2);
    map.put(p3,3);
    map.put(p4,4);

    for(Person key: map.keySet()){
      System.out.println(key + ": " + map.get(key));
    }

    Set<Person> set = new LinkedHashSet<Person>();
    set.add(p1);
    set.add(p2);
    set.add(p3);
    set.add(p4);

    System.out.println(set);
  }
}

59- Sorting List

import java.util.ArrayList;
import java.util.Comparator;
import java.util.Collections;
import java.util.List;

class Person{
  private int id;
  private String name;

  public Person(int id, String name){
    this.id = id;
    this.name = name;
  }

  public int getId(){
    return this.id;
  }

  public void setId(int id){
    this.id = id;
  }

  public String getName(){
    return name;
  }

  public void setName(String name){
    this.name = name;
  }

  public String toString(){
    return id + ": " + name;
  }
}

class StringLenthComparator implements Comparator<String>{
  @Override
  public int compare(String s1, String s2){
    int len1 = s1.length();
    int len2 = s2.length();

    if(len1 > len2){
      return 1;
    }
    else if(len1 < len2){
      return -1;
    }
    return 0;
  }
}

class AlphabeticalComparator implements Comparator<String>{
  @Override
  public int compare(String s1, String s2){
      return s1.compareTo(s2); // use to natural order
      // if want to reverse alphabetica order
      // the use '-s1.compareTo(s2);'
  }
}

public class Main{
  public static void main(String[] args){
    List<String> animals = new ArrayList<String>();

    animals.add("cat");
    animals.add("elephant");
    animals.add("tiger");
    animals.add("lion");
    animals.add("snake");
    animals.add("mongoose");

    // Collections.sort(animals, new StringLenthComparator());
    Collections.sort(animals, new AlphabeticalComparator());

    for(String animal: animals){
      System.out.println(animal);
    }

    List<Integer> numbers = new ArrayList<Integer>();

    numbers.add(3);
    numbers.add(36);
    numbers.add(73);
    numbers.add(40);
    numbers.add(1);

    Collections.sort(numbers);

    for(Integer number: numbers){
      System.out.println(number);
    }

    List<Person> people = new ArrayList<Person>();
    people.add(new Person(1,"Joe"));
    people.add(new Person(2,"Sue"));
    people.add(new Person(3,"Bob"));
    people.add(new Person(4,"Nico"));

    // Sort in order by Object ID
    // Collections.sort(people, new Comparator<Person>() {
    //     public int compare(Person p1, Person p2){
    //       if(p1.getId() > p2.getId()){
    //         return 1;
    //       }
    //       else if(p1.getId() < p2.getId()){
    //         return -1;
    //       }
    //       return 0;
    //     }
    // });

    // Sort in order by Object Name
    Collections.sort(people, new Comparator<Person>() {
        public int compare(Person p1, Person p2){
          return p1.getName().compareTo(p2.getName());
        }
    });

    for(Person person: people){
      System.out.println(person);
    }

  }
}

60- Natural Ordering

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.SortedSet;
import java.util.TreeSet;

class Person implements Comparable<Person> {
	private String name;
	
	public Person(String name) {
		this.name = name;
	}
	
	public String toString() {
		return name;
	}
	
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((name == null) ? 0 : name.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Person other = (Person) obj;
		if (name == null) {
			if (other.name != null)
				return false;
		} else if (!name.equals(other.name))
			return false;
		return true;
	}

	// Compare:
	// -1 if object here is less than in person
	// 1 if object here is greater that person
	// 0 if equal
//	@Override
//	public int compareTo(Person person) {
//		return name.compareTo(person.name);
//	}
	
	@Override
	public int compareTo(Person person) {
		int len1 = name.length();
		int len2 = person.name.length();
		
		if(len1 > len2) {
			return 1;
		}
		else if(len1 < len2) {
			return -1;
		}
		else {		
			return name.compareTo(person.name);
		}
	}
}

public class Main{
	public static void main(String[] args) {
		List<Person> list = new ArrayList<Person>();
		SortedSet<Person> set = new TreeSet<Person>();
		
		addElements(list);
		addElements(set);
		
		showElements(list);
		System.out.println();
		showElements(set);
	}
	
	private static void addElements(Collection<Person> col) {
		col.add(new Person("Joe"));
		col.add(new Person("Sue"));
		col.add(new Person("Juliet"));
		col.add(new Person("Clare"));
		col.add(new Person("Mike"));
	}
	
	private static void showElements(Collection<Person> col) {
		for(Person element: col) {
			System.out.println(element);
		}
	}
}

61- Queues
import java.util.NoSuchElementException;
import java.util.Queue;
import java.util.concurrent.ArrayBlockingQueue;

public class Main{
//	 Queues
//	 Head - front of the queue
//	 Tail - back of the queue
//	 Queues is FIFO - First in First Out | Stack is LIFO - last in last out
//	 	> Meaning the sooner you enter the quicker you will leave
// 		Queues can be Bounded or Unbounded
//		use LinkedList for Unbounded
//		use Array for bounded
//		Blocking Queue helpful for Multi-Threading
	
	public static void main(String[] args) {
		Queue<Integer> q1 = new ArrayBlockingQueue<Integer>(3);
		
		// Throws NoSuchElementException
		try {
			System.out.println("Head of the queue is:" + q1.element());
		}catch(NoSuchElementException e) {
			System.out.println("ILLEGAL: Theres no element existing in the queue");
		}
		
		q1.add(10);
		q1.add(20);
		q1.add(30);
//		q1.add(40); // throws java.lang.IllegalStateException: Queue full
		// Since ArrayBlockingQueue size is 3, we inserted queue size that is out of bounds
		
		System.out.println("Head of the queue is:" + q1.element());
		
		try {
			q1.add(40);
		}catch(IllegalStateException e) {
			System.out.println("ILLEGAL: inserting out of bound of the queue size");
		}
		
		for(Integer value: q1) {
			System.out.println("Queue Value: " + value);
		}
		
		q1.remove(); // first delete
//		System.out.println();
		q1.remove(); // second delete
//		System.out.println();
		q1.remove(); // third delete
//		System.out.println();
		
		print(q1);
	
		// q1.remove() // <--- !ILLEGAL!
		// Four delete but its illegal since the size of queue 
		// is only 3 = java.util.NoSuchElementException
		try {
			q1.remove();
		}catch(NoSuchElementException e) {
			System.out.println("ILLEGAL: Cannot remove because queue is empty");
		}
		
		System.out.println();
		System.out.println("=!Second Run!=");
		///////SAFE////////////////////////////////////////////////////////
		Queue<Integer> q2 = new ArrayBlockingQueue<Integer>(2);
		System.out.println("Queue 2 peek: " + q2.peek());
		
		q2.offer(10);
		q2.offer(20);
		if(q2.offer(30) == false) {
			System.out.println("Offer failed");
		}
		print(q2);
		
		System.out.println(q2.poll());
		System.out.println(q2.poll());
		System.out.println(q2.poll());
	}
	
	public static void print(Queue<Integer> test) {
		for(Integer arr: test) {
			System.out.println("Queue 2 value: " + arr);
		}
	}
}

62- Iterators
import java.util.Iterator;
import java.util.LinkedList;

public class Main{
	public static void main(String[] args) {
		LinkedList<String> animals = new LinkedList<String>();
		animals.add("fox");
		animals.add("cat");
		animals.add("dog");
		animals.add("rabbit");
		
		// Modern Iteration, post Java 5 and later
		for(String arr: animals) {
			System.out.println(arr);
		}
		System.out.println();
		
		// To remove element in LinkedList, it must be remove
		// by Iterator
		Iterator<String> it = animals.iterator();
		String animal = it.next();
		
		while(it.hasNext()) {
			String str = it.next();
			System.out.println(str);
			
			if(str.equals("cat"))
				it.remove();
		}
		System.out.println();
		
		// Modern Iteration, post Java 5 and later
		for(String arr: animals) {
			System.out.println(arr);
		}
	}
}

63- Implementing Iterable

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.Iterator;
import java.util.LinkedList;

// UrlLibrary Class will not going to be a template class rather
// this class can only iterate through strings.
// This implements is to override or make your own Iterable<String>
public class UrlLibrary implements Iterable<String> {
	private LinkedList<String> urls = new LinkedList<String>();
	
	// implements is to override or make your own Iterator<String>
	private class UrlIterator implements Iterator<String>{
		private int index = 0;
		@Override
		public boolean hasNext() {
			return index < urls.size();
		}

		@Override
		public String next() {
			StringBuilder sb = new StringBuilder();
			
			try {
				URL url = new URL(urls.get(index));
				
				BufferedReader br = new BufferedReader(new InputStreamReader(url.openStream()));
				
				String line = null;
				
				while((line = br.readLine()) != null) {
					sb.append(line);
					sb.append("\n");
				}
				
			} catch (MalformedURLException e) {
				e.printStackTrace();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
			index++;
			
			return sb.toString();
		}
		
		@Override
		public void remove() {
			urls.remove(index);
		}
	}
	
	public UrlLibrary() {
		urls.add("http://www.google.com");
		urls.add("http://www.facebook.com");
		urls.add("http://news.bbc.co.uk");
	}

	@Override
	public Iterator<String> iterator() {
		return new UrlIterator();
	}
	
//	@Override
//	public Iterator<String> iterator() {
//		return urls.iterator();
//	}
}
== Another File: Main.java
public class Main{
	public static void main(String[] args) {
		UrlLibrary urlLibrary = new UrlLibrary();
				
		for(String html: urlLibrary) {
			System.out.println(html.length());
		}
	}
}

64- Deciding which collection to use
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.TreeMap;

public class Main{
	public static void main(String[] args) {
//		Question
//		1. what collection will be use
//		2. fastest collection based on scenario
	
//		====== List ======
		
//		Store list of objects
//		Duplicates are allowed
//		Objects remain in order
//		Elements are indexed via an integer ={0,1,2...n}
//		Checking for particular item in list is slow
//		Looking an item up by index is fast
//		Iterating through lists is relatively fast
//		Note: You can sort lists if you want to.
		
//		If you only add or remove items at end list, use ArrayList
		List<String> list1 = new ArrayList<String>();
		
//		Removing or Adding items elsewhere in the list?
		List<String> list2 = new LinkedList<String>();

//		====== Sets ======
//		Only store unique values	
//		Great for removing duplicates
//		Not indexed, unlike lists
//		Very fast to check if a particular object exists
//		If you want to use your own objects, you must implement hasCode() and equals()
		
		
		// Order is unimportant and OK if it changes?
		// HashSet is not ordered.
		Set<String> set1 = new HashSet<String>();
		
		// Sorted in natural order? Use TreeSet
		// (1,2,3 ..., a,b,c .... etc)
		Set<String> set2 = new LinkedHashSet<String>();
		
		// Elements remain in order they were added
		Set<String> set3 = new LinkedHashSet<String>();
		
//		======  Map ======
//		Key value Pairs
//		Like lookup tables
//		Retrieving a value by key is very fast
//		Iterating over map values is very slow
//		Maps not really  optimized for iteration 
//		If you want to use your own objects as keys, you must implement hashCode() and equals()
		
//		Keys not in any particular order, and order liable to change.
		Map<String,String> map1 = new HashMap<String, String>();
		
//		Keys sorted in natural order
		Map<String, String> map2 = new TreeMap<String,String>();
		
//		Keys remain in order added
		Map<String, String> map3 = new LinkedHashMap<String,String>();
	}
}

65- Complex Data Structures

import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.Map;
import java.util.Set;

public class Main {
	// Sample Data
	// This is to store the data temporarily in
	// Memory using Java Collections
	
	// for example, it fetch data from a database or JSON Server
	public static String[] vehicles = {
		"ambulance","helicopter","lifeboat"
	};
	
	public static String[][] drivers = {
		{"Fred","Sue","Pete"},
		{"Sue","Richard","Bob","Fred"},
		{"Pete","Mary","Bob"}
	};
	
	public static void main(String[] args) {
		Map<String, Set<String>> personnel = new HashMap<>();
		
		for(int i=0; i<vehicles.length; i++) {
			String vehicle = vehicles[i];
			String[] driversList = drivers[i];
			
			Set<String> driverSet = new LinkedHashSet<String>();
			
			for(String driver: driversList) {
				driverSet.add(driver);
			}
			
			personnel.put(vehicle,driverSet);
		}
		
		{
			try{
				Set<String> driversList = personnel.get("lifeboat");
			
				for(String driver: driversList) {
					System.out.println(driver);
				}
			}catch(NullPointerException e) {
				System.out.println("Cannot Find Vehicle");
			}
		}
		
		System.out.println();
		
		for(String vehicle: personnel.keySet()) {
			System.out.println(vehicle);
			Set<String> driversList = personnel.get(vehicle);
			
			for(String driver: driversList) {
				System.out.print(driver);
				System.out.print(" ");
			}
			System.out.println();
		}
	}
}

